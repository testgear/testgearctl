diff -Naur luaprompt-0.4.orig/prompt.c luaprompt-0.4/prompt.c
--- luaprompt-0.4.orig/prompt.c	2014-10-06 16:59:57.000000000 +0200
+++ luaprompt-0.4/prompt.c	2014-10-28 11:18:00.993009017 +0100
@@ -30,6 +30,7 @@
 #include <string.h>
 #include <ctype.h>
 #include <unistd.h>
+#include <stdbool.h>
 
 #ifdef HAVE_IOCTL
 #include <sys/ioctl.h>
@@ -1092,7 +1093,8 @@
 void luap_enter(lua_State *L)
 {
     int incomplete = 0, s = 0, t = 0, l;
-    char *line, *prepended;
+    char *line, *prepended, *qbuffer;
+    bool question = false;
 
     /* Save the state since it needs to be passed to some readline
      * callbacks. */
@@ -1161,12 +1163,102 @@
         /* Try to execute the line with a return prepended first.  If
          * this works we can show returned values. */
 
+        /* Save buffer for readline history */
+        qbuffer = strdup(buffer);
+
+        /* Remove any trailing whitespace(s) */
+        int length = strlen(buffer);
+        while (isspace(buffer[length-1]))
+            buffer[--length] = 0;
+
+        /* Is there a '?' in the end of the line? */
+        if (buffer[length-1] == '?')
+        {
+            /* Remove question mark */
+            buffer[--length] = 0;
+
+            /* Remove any trailing whitespace(s) */
+            while (isspace(buffer[length-1]))
+                buffer[--length] = 0;
+
+            question = true;
+        } else
+            question = false;
+
         l = asprintf (&prepended, "return %s", buffer);
 
         if (luaL_loadbuffer(_L, prepended, l, chunkname) == LUA_OK) {
-            execute();
 
-            incomplete = 0;
+            /* If question asked, lookup available help */
+            if (question)
+            {
+                int h;
+
+                /* Save stack */
+                h = lua_gettop (_L);
+
+                /* Evaluate line */
+                lua_pcall (_L, 0, 1, 0);
+
+                /* In case of table, print _help_self string if available */
+                if (lua_istable(_L, -1))
+                {
+                    lua_getfield(_L, -1, "_help_self");
+
+                    if (lua_isstring(_L, -1))
+                        print_output("%s\n", lua_tostring(_L, -1));
+                } else
+                {
+                    /* In case of non-table, find first and last part separated
+                     * by '.'.  Assume that the last part is the name of the
+                     * element (number or function) that we need to look up the
+                     * help description for in the _help table of the parent
+                     * (first part).
+                     */
+
+                    /* Find first and last part separated by '.' */
+                    char *buffer = strdup(prepended);
+                    char *first = buffer;
+                    char *last = strrchr(buffer, '.');
+                    if (last != NULL)
+                    {
+                        *last = 0;
+                        last++;
+                    }
+
+                    /* Look up help if we have both first and last part */
+                    if ((first != NULL) && (last != NULL))
+                    {
+                        /* Evaluate parent (first part) */
+                        luaL_loadstring(_L, first);
+                        lua_pcall (_L, 0, 1, 0);
+
+                        if (lua_istable(_L, -1))
+                        {
+                            /* Retrieve _help table */
+                            lua_getfield(_L, -1, "_help");
+
+                            if (lua_istable(_L, -1))
+                            {
+                                /* Print help of element name (last part) */
+                                lua_getfield(_L, -1, last);
+                                if (lua_isstring(_L, -1))
+                                    print_output("%s\n", lua_tostring(_L, -1));
+                            }
+                        }
+                    }
+
+                    free(buffer);
+                }
+
+                /* Restore stack */
+                lua_settop(_L, h);
+            } else
+            {
+                execute();
+
+                incomplete = 0;
+            }
         } else {
             lua_pop (_L, 1);
 
@@ -1213,10 +1305,14 @@
         /* Add the line to the history if non-empty. */
 
         if (!incomplete) {
-            add_history (buffer);
+            if (question)
+                add_history (qbuffer);
+            else
+                add_history (buffer);
         }
 #endif
 
+        free (qbuffer);
         free (prepended);
         free (line);
     }
